x = 2
x
x = c(2,3,-1,4)
y = c(3,5,100,2)
plot(x,y)
model = lm(y~x)
summary(model)
?load
source('~/Desktop/entropyexample.R')
names <- c("Bob","Harry","Sally","Michael","Diane")
scifi <- c(0.15,0.7,1,0.25,0.05)
fantasy <- c(0.2,0.3,0,0.25,0.1)
mystery <- c(0.5,0,0,0.25,0.3)
romance <- c(0.15,0,0,0.25,0.55)
genres <- data.frame(names,scifi,fantasy,mystery,romance)
#check to make sure they sum to one for each person
apply(genres[,2:5],1,sum)
#now do entropy
genres$entropy <- -1 * apply(genres[,2:5]*log(genres[,2:5],4),1,sum,na.rm=T)
#You can see the case of minimal (0) and maximal (1) entropy. Note that the
#higher this number is the less genre niched a person is. So if you want to measure
#niching you might want to take one minus this number.
#Note that a lot of people just use the natural log instead of log with a base
#equal to the number of categories. That will give you the the same result except
#that your maximum value will be equal to the log(number of categories). In this case
#log(4)=1.386294. I much prefer maxing out at 1 for comparability purposes, but
#some people might be confused if you say entropy has a max of 1 if you don't explain
#that you are using a log base 4 rather than natural log.
genres$entropy.ln <- -1 * apply(genres[,2:5]*log(genres[,2:5]),1,sum,na.rm=T)
#you can convert back to a 0 to 1 scale post estimation by dividing by the natural
#log of the number of categories
(genres$entropy.ln/log(4))/genres$entropy
genres
load("http://pages.uoregon.edu/aarong/soc312data/titanic.RData")
con <- url("http://pages.uoregon.edu/aarong/soc312data/titanic.RData")
load(con)
rm(titanic)
rm(con)
titanic <- read.table("/var/folders/x1/gjk70hw572x99dszvh5xvdcw0000gp/T//Rtmp0J79JF/data6fdc328c07d2", quote="\"")
View(titanic)
titanic
load("~/Teaching/Classes/SOC312/NewDatasets/crimes.RData")
View(crimes)
crimes
crimes
head(crimes)
View(crimes)
foot(crimes)
footer(crimes)
load("~/Teaching/Classes/SOC312/NewDatasets/titanic.RData")
View(titanic)
load("~/Teaching/Classes/SOC312/NewDatasets/crimes.RData")
View(crimes)
crimes
crimes
head(crimes)
load("~/Teaching/Classes/SOC312/NewDatasets/titanic.RData")
View(titanic)
head(titanic)
load("~/Teaching/Classes/SOC312/NewDatasets/sexfreq.RData")
3+2
(3+2)*5^2
x <- c(3,2,5,7,9,10,11)
x+2
x/2
x^2
mean(x)
summary(x)
sd(x)
install.packages("RSQLite")
install.packages("dlpyr")
install.packages("dplyr")
library(dplyr)
library(RSQLite)
db <- src_sqlite("~/Downloads/movies.db")
omdb <- tbl(db, "omdb")
tomatoes <- tbl(db, "tomatoes")
head(omdb)
names(omdb)
omdb$src
omdb$where
all_movies <- inner_join(omdb, tomatoes, by = "ID") %>%
filter(Reviews >= 10) %>%
select(ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre, Released,
Director, Writer, imdbRating, imdbVotes, Language, Country, Oscars,
Rating = Rating.y, Meter, Reviews, Fresh, Rotten, userMeter, userRating, userReviews,
BoxOffice, Production)
head(all_movies)
all_movies$src
all_movies$src$con
all_movies$src$select
all_movies$select
as.data.frame(all_movies$select)
reviews <- 0
oscars <- 0
minyear <- 0
maxyear <- 2100
minboxoffice <- 0
maxboxoffice <- 1000000000000000000000
m <- all_movies %>%
filter(
Reviews >= reviews,
Oscars >= oscars,
Year >= minyear,
Year <= maxyear,
BoxOffice >= minboxoffice,
BoxOffice <= maxboxoffice
) %>%
arrange(Oscars)
head(m)
?%like%
?like
m$Oscars
m <- as.data.frame(m)
head(m)
m$Oscars
?head
tail(m)
m$Genre %like% "Action"
?filter
genre <- "%Action%"
m %>% filter(Genre %like% genre)
?like
?%>%
install.packages("ggvis")
m %>% filter(Genre %like% genre)
install.packages("data.table")
library(ggvis)
m %>% filter(Genre %like% genre)
library(data.table)
m %>% filter(Genre %like% genre)
genre
m %>% filter(Genre %like% "Action")
temp <- m %>% filter(Genre %like% "Action")
head(temp)
m$Genre %like% "Action"
library(dplyr)
library(RSQLite)
library(ggvis)
library(data.table)
db <- src_sqlite("movies.db")
omdb <- tbl(db, "omdb")
tomatoes <- tbl(db, "tomatoes")
# Join tables, filtering out those with <10 reviews, and select specified columns
all_movies <- inner_join(omdb, tomatoes, by = "ID") %>%
filter(Reviews >= 10) %>%
select(ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre, Released,
Director, Writer, imdbRating, imdbVotes, Language, Country, Oscars,
Rating = Rating.y, Meter, Reviews, Fresh, Rotten, userMeter, userRating, userReviews,
BoxOffice, Production)
reviews <- 0
oscars <- 0
minyear <- 0
maxyear <- 2100
minboxoffice <- 0
maxboxoffice <- 1000000000000000000
m <- all_movies %>%
filter(
Reviews >= reviews,
Oscars >= oscars,
Year >= minyear,
Year <= maxyear,
BoxOffice >= minboxoffice,
BoxOffice <= maxboxoffice
) %>%
arrange(Oscars)
m <- as.data.frame(m)
head(m)
View(m)
movies <- as.data.frame(m)
m$Genre %like% "Action"
movies$Genre %like% "Documentary" | movies$Genre %like% "Short"
movies$Genre %like% "Documentary" | movies$Genre %like% "Short"
summary(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")
(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE
movies <- movies[(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE,]
head(movies)
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes","Language",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
head(movies)
movies$Language
head(movies)
db <- src_sqlite("movies.db")
omdb <- tbl(db, "omdb")
tomatoes <- tbl(db, "tomatoes")
# Join tables, filtering out those with <10 reviews, and select specified columns
all_movies <- inner_join(omdb, tomatoes, by = "ID") %>%
filter(Reviews >= 10) %>%
select(ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre, Released,
Director, Writer, imdbRating, imdbVotes, Language, Country, Oscars,
Rating = Rating.y, Meter, Reviews, Fresh, Rotten, userMeter, userRating, userReviews,
BoxOffice, Production)
reviews <- 0
oscars <- 0
minyear <- 0
maxyear <- 2100
minboxoffice <- 0
maxboxoffice <- 1000000000000000000
m <- all_movies %>%
filter(
Reviews >= reviews,
Oscars >= oscars,
Year >= minyear,
Year <= maxyear,
BoxOffice >= minboxoffice,
BoxOffice <= maxboxoffice
) %>%
arrange(Oscars)
movies <- as.data.frame(m)
movies <- movies[(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE,]
head(movies)
movies$Rating_m
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes","Language",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
head(movies)
movies$Genre
paste(movies$Genre,sep=",")
movies$scifi <- movies$Genre %like% "Sci-Fi"
head(movies)
movies$Language
substr
substr(movies$Language,1,7)
substr(movies$Language,1,7)=="English"
smovies <- movies[substr(movies$Language,1,7)=="English",]
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
#specific genres as 1/0
movies$scifi <- movies$Genre %like% "Sci-Fi"
movies <- movies[substr(movies$Language,1,7)=="English",]
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
#specific genres as 1/0
movies$scifi <- movies$Genre %like% "Sci-Fi"
head(movies)
db <- src_sqlite("movies.db")
omdb <- tbl(db, "omdb")
tomatoes <- tbl(db, "tomatoes")
# Join tables, filtering out those with <10 reviews, and select specified columns
all_movies <- inner_join(omdb, tomatoes, by = "ID") %>%
filter(Reviews >= 10) %>%
select(ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre, Released,
Director, Writer, imdbRating, imdbVotes, Language, Country, Oscars,
Rating = Rating.y, Meter, Reviews, Fresh, Rotten, userMeter, userRating, userReviews,
BoxOffice, Production)
reviews <- 0
oscars <- 0
minyear <- 0
maxyear <- 2100
minboxoffice <- 0
maxboxoffice <- 1000000000000000000
m <- all_movies %>%
filter(
Reviews >= reviews,
Oscars >= oscars,
Year >= minyear,
Year <= maxyear,
BoxOffice >= minboxoffice,
BoxOffice <= maxboxoffice
) %>%
arrange(Oscars)
movies <- as.data.frame(m)
movies <- movies[(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE,]
movies <- movies[substr(movies$Language,1,7)=="English",]
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
#specific genres as 1/0
movies$scifi <- movies$Genre %like% "Sci-Fi"
head(movies)
summary(movies$Year)
shiny::runApp('Teaching/Classes/SOC312/ShinyApps/histogram')
runApp('Teaching/Classes/SOC312/ShinyApps/histogram')
runApp('Teaching/Classes/SOC312/ShinyApps/influentialpoints')
runApp('Teaching/Classes/SOC312/ShinyApps/scatterplot')
load("~/Teaching/Classes/SOC312/ExampleDatasets/crimes.RData")
head(crimes.RData)
head(crimes)
crimes$Violent
mean(crimes$Violent)
hist(crimes$Violent)
hist(crimes$Violent, col="red")
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)")
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)")
?hist
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=40)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=5)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=1)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=0)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=15)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=20)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=30)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10)
?hist
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10, freq=FALSE)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10, prob=TRUE)
library(lme4)
?lmer
setwd("~/Teaching/Classes/SOC312/ShinyApps/reducerss")
load("ExampleDatasets/crimes.RData")
setwd("~/Teaching/Classes/SOC312/ShinyApps")
load("ExampleDatasets/crimes.RData")
setwd("~/Teaching/Classes/SOC312/ShinyApps/reducerss")
load("ExampleDatasets/crimes.RData")
plot(crimes$MedianAge, crimes$Violent)
plot(crimes$MedianIncome, crimes$Violent)
plot(crimes$Poverty, crimes$Violent)
plot(crimes$MedianAge, crimes$Violent)
abline(lm(Violent~MedianAge, data=crimes))
summary(lm(Violent~MedianAge, data=crimes))
summary(lm(Property~Unemployment, data=crimes))
mean(crimes$Property)
x <- crimes$Unemployment
rss <- NULL
bestModel <- lm(Property~Unemployment, data=crimes)
?abline
?segments
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bestModel
names(bestModel)
bestModel$residuals
sum(bestModel$residuals^2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPlot
?reactive
?reactiveValues
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
values <- reactiveValues()
reactiveValues$a <- 3
values$a <- 3
values$a
isolate(values$a)
runApp()
?reactiveValuesToList
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
