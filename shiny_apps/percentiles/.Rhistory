minboxoffice <- 0
maxboxoffice <- 1000000000000000000
m <- all_movies %>%
filter(
Reviews >= reviews,
Oscars >= oscars,
Year >= minyear,
Year <= maxyear,
BoxOffice >= minboxoffice,
BoxOffice <= maxboxoffice
) %>%
arrange(Oscars)
m <- as.data.frame(m)
head(m)
View(m)
movies <- as.data.frame(m)
m$Genre %like% "Action"
movies$Genre %like% "Documentary" | movies$Genre %like% "Short"
movies$Genre %like% "Documentary" | movies$Genre %like% "Short"
summary(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")
(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE
movies <- movies[(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE,]
head(movies)
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes","Language",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
head(movies)
movies$Language
head(movies)
db <- src_sqlite("movies.db")
omdb <- tbl(db, "omdb")
tomatoes <- tbl(db, "tomatoes")
# Join tables, filtering out those with <10 reviews, and select specified columns
all_movies <- inner_join(omdb, tomatoes, by = "ID") %>%
filter(Reviews >= 10) %>%
select(ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre, Released,
Director, Writer, imdbRating, imdbVotes, Language, Country, Oscars,
Rating = Rating.y, Meter, Reviews, Fresh, Rotten, userMeter, userRating, userReviews,
BoxOffice, Production)
reviews <- 0
oscars <- 0
minyear <- 0
maxyear <- 2100
minboxoffice <- 0
maxboxoffice <- 1000000000000000000
m <- all_movies %>%
filter(
Reviews >= reviews,
Oscars >= oscars,
Year >= minyear,
Year <= maxyear,
BoxOffice >= minboxoffice,
BoxOffice <= maxboxoffice
) %>%
arrange(Oscars)
movies <- as.data.frame(m)
movies <- movies[(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE,]
head(movies)
movies$Rating_m
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes","Language",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
head(movies)
movies$Genre
paste(movies$Genre,sep=",")
movies$scifi <- movies$Genre %like% "Sci-Fi"
head(movies)
movies$Language
substr
substr(movies$Language,1,7)
substr(movies$Language,1,7)=="English"
smovies <- movies[substr(movies$Language,1,7)=="English",]
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
#specific genres as 1/0
movies$scifi <- movies$Genre %like% "Sci-Fi"
movies <- movies[substr(movies$Language,1,7)=="English",]
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
#specific genres as 1/0
movies$scifi <- movies$Genre %like% "Sci-Fi"
head(movies)
db <- src_sqlite("movies.db")
omdb <- tbl(db, "omdb")
tomatoes <- tbl(db, "tomatoes")
# Join tables, filtering out those with <10 reviews, and select specified columns
all_movies <- inner_join(omdb, tomatoes, by = "ID") %>%
filter(Reviews >= 10) %>%
select(ID, imdbID, Title, Year, Rating_m = Rating.x, Runtime, Genre, Released,
Director, Writer, imdbRating, imdbVotes, Language, Country, Oscars,
Rating = Rating.y, Meter, Reviews, Fresh, Rotten, userMeter, userRating, userReviews,
BoxOffice, Production)
reviews <- 0
oscars <- 0
minyear <- 0
maxyear <- 2100
minboxoffice <- 0
maxboxoffice <- 1000000000000000000
m <- all_movies %>%
filter(
Reviews >= reviews,
Oscars >= oscars,
Year >= minyear,
Year <= maxyear,
BoxOffice >= minboxoffice,
BoxOffice <= maxboxoffice
) %>%
arrange(Oscars)
movies <- as.data.frame(m)
movies <- movies[(movies$Genre %like% "Documentary" | movies$Genre %like% "Short")==FALSE,]
movies <- movies[substr(movies$Language,1,7)=="English",]
movies <- movies[,c("Title","Year","Rating_m","Runtime","Genre","imdbRating","imdbVotes",
"Country","Oscars","Rating","Meter","Reviews","Fresh","Rotten","userMeter","userRating",
"userReviews","BoxOffice")]
#specific genres as 1/0
movies$scifi <- movies$Genre %like% "Sci-Fi"
head(movies)
summary(movies$Year)
shiny::runApp('Teaching/Classes/SOC312/ShinyApps/histogram')
runApp('Teaching/Classes/SOC312/ShinyApps/histogram')
runApp('Teaching/Classes/SOC312/ShinyApps/influentialpoints')
runApp('Teaching/Classes/SOC312/ShinyApps/scatterplot')
load("~/Teaching/Classes/SOC312/ExampleDatasets/crimes.RData")
head(crimes.RData)
head(crimes)
crimes$Violent
mean(crimes$Violent)
hist(crimes$Violent)
hist(crimes$Violent, col="red")
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)")
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)")
?hist
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=40)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=5)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=1)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=0)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=15)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=20)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=30)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10)
?hist
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10, freq=FALSE)
hist(crimes$Violent, col="red", xlab="Violent crime rate (per 100,000)", breaks=10, prob=TRUE)
library(lme4)
?lmer
setwd("~/Teaching/Classes/SOC312/ShinyApps/reducerss")
load("ExampleDatasets/crimes.RData")
setwd("~/Teaching/Classes/SOC312/ShinyApps")
load("ExampleDatasets/crimes.RData")
setwd("~/Teaching/Classes/SOC312/ShinyApps/reducerss")
load("ExampleDatasets/crimes.RData")
plot(crimes$MedianAge, crimes$Violent)
plot(crimes$MedianIncome, crimes$Violent)
plot(crimes$Poverty, crimes$Violent)
plot(crimes$MedianAge, crimes$Violent)
abline(lm(Violent~MedianAge, data=crimes))
summary(lm(Violent~MedianAge, data=crimes))
summary(lm(Property~Unemployment, data=crimes))
mean(crimes$Property)
x <- crimes$Unemployment
rss <- NULL
bestModel <- lm(Property~Unemployment, data=crimes)
?abline
?segments
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
bestModel
names(bestModel)
bestModel$residuals
sum(bestModel$residuals^2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderPlot
?reactive
?reactiveValues
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
values <- reactiveValues()
reactiveValues$a <- 3
values$a <- 3
values$a
isolate(values$a)
runApp()
?reactiveValuesToList
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
?observer
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
summary(lm(Property~Unemployment))
summary(lm(Property~Unemployment, data=crimes))
load("ExampleDatasets/crimes.RData")
summary(lm(Property~Unemployment, data=crimes))
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Teaching/Classes/SOC312/ShinyApps/percentiles")
percentile
quantile
?quantile
?system
list.files()
list.files()
system("pwd")
system("ln -s ../../ExampleDatasets ExampleDatasets")
load("ExampleDatasets/movies.RData")
x <- movies$Runtime
quantiles(x)
quantile9x
?quantile
quantile(x, 10)
quantile(x, 0.1)
quantile(x, 0)
quantile(x, 100)
quantile(x, 1)
summary(x)
runApp()
runApp()
runApp()
?cuts
?plot
h <- hist(x, breaks = bins,
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)", plot=FALSE)
cuts <- cut(h$breaks, c(-Inf, breakpoint, Inf))
bins <- seq(0, by=1, length.out = 1+(max(x)/1))
breakpoint <- quantile(x, input$percentile/100)
# draw the histogram with the specified bins
h <- hist(x, breaks = bins,
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)", plot=FALSE)
cuts <- cut(h$breaks, c(-Inf, breakpoint, Inf))
breakpoint <- 100
h <- hist(x, breaks = bins,
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)", plot=FALSE)
cuts <- cut(h$breaks, c(-Inf, breakpoint, Inf))
cuts
runApp()
runApp()
runApp()
runApp()
h
runApp()
runApp()
?text
runApp()
runApp()
h
?polygon
bins
names(h)
h$mids
width <- 5
bins <- seq(0, by=width, length.out = 1+(max(x)/width))
h <- hist(x, breaks = bins, col="skyblue", border="black",
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)")
h
?rect
for(i in 1:(length(h$breaks)-1)) {
rect(h$breaks[i],h$counts[i],h$breaks[i+1],h$counts[i],col="red",border="blue")
}
?rect
h <- hist(x, breaks = bins, col="white", border="black",
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)")
for(i in 1:(length(h$breaks)-1)) {
rect(h$breaks[i],h$counts[i],h$breaks[i+1],h$counts[i],col="red",border="blue")
}
h <- hist(x, breaks = bins, col="white", border="white",
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)")
for(i in 1:(length(h$breaks)-1)) {
rect(h$breaks[i],h$counts[i],h$breaks[i+1],h$counts[i],col="red",border="blue")
}
?rect
for(i in 1:(length(h$breaks)-1)) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="blue")
}
breakpoint
h <- hist(x, breaks = bins, col="white", border="white",
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)")
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]>=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="blue")
}
if(h$breaks[i+1]<breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="green",border="blue")
}
}
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="blue")
}
if(h$breaks[i+1]>=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="green",border="blue")
}
}
h$breaks
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="blue")
}
if(h$breaks[i+1]>breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="green",border="blue")
}
}
breakpoint <- 102
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="blue")
}
if(h$breaks[i+1]>breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="green",border="blue")
}
}
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="blue")
} else {
if(h$breaks[i]>breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="green",border="blue")
}
}
}
h <- hist(x, breaks = bins, col="white", border="white",
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)")
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="blue")
} else {
if(h$breaks[i]>breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="green",border="blue")
}
}
}
h <- hist(x, breaks = bins, col="white", border="black",
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)")
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border=NA)
} else {
if(h$breaks[i]>breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="green",border=NA)
} else {
#we have a split rectangle
}
}
}
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="grey",border="black")
} else {
if(h$breaks[i]>breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="black")
} else {
#we have a split rectangle
rect(h$breaks[i],0,breakpoint,h$counts[i],col="grey",border="black")
rect(breakpoint,0,h$breaks[i+1],h$counts[i],col="red",border="black")
}
}
}
h <- hist(x, breaks = bins, col="white", border="black",
main="Histogram of movie runtime in minutes",
xlab="Runtime (in minutes)")
for(i in 1:(length(h$breaks)-1)) {
if(h$breaks[i+1]<=breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="grey",border="black")
} else {
if(h$breaks[i]>breakpoint) {
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col="red",border="black")
} else {
#we have a split rectangle
rect(h$breaks[i],0,breakpoint,h$counts[i],col="grey",border=NA)
rect(breakpoint,0,h$breaks[i+1],h$counts[i],col="red",border=NA)
rect(h$breaks[i],0,h$breaks[i+1],h$counts[i],col=NA,border="black")
}
}
}
runApp()
h
runApp()
runApp()
load("ExampleDatasets/crimes.RData")
hist(crimes$Violent)
hist(crimes$Violent, breaks=50)
hist(crimes$Violent, breaks=10)
load("ExampleDatasets/titanic.RData")
hist(titanic$age)
boxplot(titanic$age)
boxplot(movies$Runtime)
boxplot(titanic$age)
load("ExampleDatasets/politics.RData")
hist(politics$age)
box(politics$age)
boxplot(politics$age)
box(politics$age)
hist(politics$age)
runApp()
width <- 5
bins <- seq(0, by=width, length.out = 1+(max(x)/width))
bins
x
x <- politics$age
width <- 5
bins <- seq(0, by=width, length.out = 1+(max(x)/width))
max(x)
runApp()
breakpoint <- quantile(x, input$percentile/100)
runApp()
b <- boxplot(x, col="grey")
b
abline(v=1)
abline(v=0.5)
abline(v=0.7)
abline(v=0.9)
abline(v=0.95)
abline(v=0.92)
abline(v=0.9)
abline(v=0.91)
abline(v=0.85)
abline(v=0.80)
abline(v=1.2)
runApp()
b
b$stats[4,1
]
breakpoint
breakpoint <- 40
runApp()
runApp()
?segments
runApp()
summary(x)
90-17
80-18
90-18
72/8
72/4
runApp()
b
runApp()
?text
runApp()
iqr
diff(quantile(x,c(25,75)))
diff(quantile(x,c(25,75)), na.rm=TRUE)
diff(quantile(x,c(25,75), na.rm=TRUE))
diff(quantile(x,c(.25,.75), na.rm=TRUE))
runApp()
?segments
runApp()
runApp()
runApp()
